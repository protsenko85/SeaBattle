Server
------
* searches for players
* establishes connections between players
* resends player's moves
* checks correctness of moves

Client
------
* user interface
* API for placing ships
* connection to server and playing matches

Session
-------
'>N ' or '>> ' -- client
'<N ' or '<< ' -- server (N - one of variants)
'*' -- disconnection
----------------------------------------------------------------------------->>>
# authorize
>> mbclient:client_protocol_version:login:password:
<1 wrongver:                                        *
<2 wronguser:                                       *
<3 alreadyauth:
<4 mbserver:server_protocol_version:

# recieve field
>> field:ship_size:010001000...000010001:
<1 wrongfield:                                      *

# send opponent info
<< found:enemy_login:
<< go:

# recieve steps
>> step:4:3:
<1 wrongstep:
<2 field1:miss:4:3:
<2 field2:miss:4:3:
<3 field1:half:4:3:
<4 field1:kill:4:3:
<4 field1:kill:4:2:
<4 field1:kill:4:1:

# send status
<1 go:
<2 win:                                             *
<3 lose:                                            *

>> disconnect:                                      *
-----------------------------------------------------------------------------<<<

Session's description
---------------------
1) Client says a string:
        ':mbclient:client_protocol_version:login:password:'
  * protocol is a positive number
  * login & password are strings of latin latters and digits, specific symbols
2) Server says:
        'mbserver:server_protocol_number:' (positive number)
3) Client says:
        'field:ship_size:ships_location:'
  * ship_size may be from 1 to 10. The field size depends on it.
    Default 4. So field size will be 100. Formula: (ship_size*(ship_size+1)/2)^2
  * 1 — ship is located here, 0 — no ship in this cell
  * from left to right, from top to bottom
4) Server says 'found:enemy_login:' if an opponent was found.
5) Server says 'go:' if client should make a move.
6) Client says 'step:cell_X:cell_Y:'
  * cell_X,cell_y from >=0 and <= 9
7) Server says 'field2:hits_info:cell_X:cell_Y:'.
  * hits info --- one of three alternatives:
    miss,
    half – ship was hurted,
    kill – ship was died.
  This is an information did player hit some ships.
8) Server says: 'field1:hits_info:cell_X:cell_Y:'.
9) After finishing a game server says 'win:' or 'lose:' and closes connection.
10) In case of an opponent has left the game
	server says 'win:' and closes connection.
11) In case of bad request server says 'wrongcmd:'
12) In case of illegal login or password
	server says 'wronguser:' and closes connection.
13) On protocol version mismatch server says 'wrongver:' and closes connection.
14) If client wants to leave game, it says 'disconnect:'
15) If server receives 'disconnect:' command,
	it considers that client lost and closing connection.
16) Server could send 'ping:' command.
	Client should respond with 'pong:'



1010010100101001010010100101001010010100101001010010100101001010010100101001010010100101001010010100
